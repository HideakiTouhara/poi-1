#!/bin/bash

readonly root_dir=$(git rev-parse --show-toplevel)
readonly default_poi_dir=$HOME/.poi
declare -a tags

_load_poi_config(){
    if [ -z "${POI_DIR}" ]; then
        poi_dir=$default_poi_dir
    else
        poi_dir=${POI_DIR}
    fi

    if [ ! -d $poi_dir ]; then
        mkdir -p $poi_dir/{tmp,trash,refs}
    fi
}

_parse()
{
    while (( "$#" )); do
        case "$1" in
            -*|--*)
                case "$1" in
                    -t|--tag)
                        tags+=(${2})
                        for tag in $(echo "${2}" | tr ',' "\n");
                        do
                            tags+=(${tag})
                        done
                        ;;
                    --title)
                        title=${2}
                        ;;
                    *)
                        echo "Error: no option ${1}" >&2
                        exit 1
                        ;;
                esac
                shift 2
                ;;
            help)
                helpPoiCommand
                exit 1
                ;;
            *)
                echo "Error: no command found ${CMD}" >&2
                exit 1
                ;;
        esac
    done
}

_findFile()
{
    case "$1" in
        help|--help)
            helpLsCommand
            exit 1
            ;;
        -t|--tag)
            tag=$2
            shift 2
            ;;
        --title)
            title=$2
            shift 2
            ;;
        {,-}-i|--interactive)
            interactive=1
            shift
            ;;
        -*|--*)
            echo "Error, no such option" >&2
            exit 1
            ;;
    esac

    if [[ -n "$title" ]]; then
        files=$(ls -1 $poi_dir/tmp/ | egrep -e $title)
        count=$(ls -1 $poi_dir/tmp/ | egrep -e $title | wc -l)
    elif [[ -n "$tag" ]]; then
        files=$(ls -1 $poi_dir/tmp/ | egrep -e $tag)
        count=$(ls -1 $poi_dir/tmp/ | egrep -e $tag | wc -l)
    else 
        files=$(ls -1 $poi_dir/tmp/)
        count=$(ls -1 $poi_dir/tmp/ | wc -l)
    fi
}

_output_files()
{
    if [[ -z $files ]]; then
        echo "No files found"
        exit 0
    fi

    if [[ $interactive -eq 1 ]]; then
        for file in $files; do
            timestamp=$(date +%s)
            datetime=$(basename $file |  sed -e 's/\(.*\)-\(.*\)/\1 \2/' | awk '{print $1}')
            datetime_unix=$(date -jf '%Y_%m_%d_%H_%M_%S' $datetime +%s)
            filename=$(basename $file | sed -e 's/\(.*\)-\(.*\)/\1 \2/' | awk '{print $2}')
            echo -e "$filename\t"$(date -r $datetime_unix '+%Y/%m/%d %H:%M:%S')"" >> $poi_dir/refs/$timestamp
        done
        tmp_selected_file=$(cat $poi_dir/refs/$timestamp | fzf)
        tmp_filename=$(echo $tmp_selected_file | awk '{print $1}')
        tmp_date=$(echo $tmp_selected_file | awk '{print $2}')
        tmp_time=$(echo $tmp_selected_file  | awk '{print $3}')
        selected_file=$(date -jf '%Y/%m/%d %H:%M:%S' "$tmp_date $tmp_time" +%Y_%m_%d_%H_%M_%S)-$tmp_filename
        rm $poi_dir/refs/$timestamp
    else
        echo -e "Title\tDatetime\t\tFileID\t\t\t\tTags"
        for file in $files; do
            datetime=$(basename $file |  sed -e 's/\(.*\)-\(.*\)/\1 \2/' | awk '{print $1}')
            datetime_unix=$(date -jf '%Y_%m_%d_%H_%M_%S' $datetime +%s)
            filename=$(basename $file | sed -e 's/\(.*\)-\(.*\)/\1 \2/' | awk '{print $2}')
            echo -e "$filename\t"$(date -r $datetime_unix '+%Y/%m/%d %H:%M:%S')"\t$file"
        done
    fi
}

poi()
{
    # echo ${tags[*]}
    if [ -z "$title" ]; then
        title=noname
    fi
    filename=$(date +%Y_%m_%d_%H_%M_%S)-$title

    while read line; do
        echo "$line" >> $poi_dir/tmp/$filename
        # clean_line=${line//*,/ }
    done

    echo $poi_dir/tmp/$filename > $poi_dir/refs/HEAD
    echo "Poied $title"
}

pui(){
    filename=$(cat $poi_dir/refs/HEAD)
    cat $filename;
}

lsPoi(){
    _findFile $@
    _output_files
}


catPoi()
{
    case "$1" in
        -*|--*)
            _findFile $@
            ;;
        *)
            if [[ -n "$1" ]]; then
                cat $poi_dir/tmp/$1
                exit 0
            fi
            ;;
    esac

    if [[ -z $files ]]; then
        echo "No files found"
        exit 0
    fi

    len=$(echo $files | wc -l)
    if [[ $counts -eq 1 ]]; then
        echo "Hoge"
    else
        if [[ ! $interactive -eq 1 ]]; then
            echo -e "Error multiple file\n"
            _output_files
        else
            _output_files
            cat $poi_dir/tmp/$selected_file
        fi
    fi
}

wherePoi(){
    head=$(cat $poi_dir/refs/HEAD)
    echo $head
}

helpPoi() {
    cat <<-shoWHelp
        Name
            Poi is a useful temporary file manager 🍭 🗑 ⚔️

        Synopsis
            poi COMMAND

        COMMANDs:
            [Store tmp file]
             
                curl -s "www.google.com" | poi poi --title google_page --tag html,google

            [Restore tmp file: command mode]

                poi find SUM_COMMAND google_page

            [Search file: command mode]

                poi find SUM_COMMAND googl
            
            [Search by tag: command mode]

                poi find SUM_COMMAND html
            
            [Search by file: interactive mode]

                poi find SUM_COMMAND -i

            [Search by tag: interactve mode]

                poi find SUM_COMMAND -i

            [Show help]

                poi help
        
shoWHelp
}

helpPoiCommand()
{
    cat <<-shoWPoiHelp
        Name
            poi poi - list tmp file

        Synopsis
            SOME_STDOUT | poi poi

        Flags
            --title     - add title
            -t, --tag   - add tag   
shoWPoiHelp
}

helpLsCommand(){
    cat <<-shoWPoiHelp
        Name
            poi ls - stores tmp file

        Synopsis
            SOME_STDOUT | poi poi

        Flags
            --title     - add title
            -t, --tag   - add tag   
shoWPoiHelp
}

main()
{
    _load_poi_config
    CMD=${1}

    if [ -z "${CMD}" ]; then
        echo "Error: no command specified" >&2
        exit 1
    fi

    case ${CMD} in
        poi)
            shift
            _parse $@
            poi
            ;;
        pui)
            shift
            pui
            ;;
        where)
            shift
            wherePoi
            ;;
        ls)
            shift
            lsPoi $@
            ;;
        cat)
            shift
            catPoi $@
            ;;
        sweep)
            shift
            mv $poi_dir/tmp/* $poi_dir/trash
            ;;
        clear)
            shift
            mv $poi_dir/tmp/* $poi_dir/trash
            rm -rf $poi_dir/trash
            ;;
        help)
            helpPoi
            exit 0
            ;;
        *)
            echo "Error: no command found ${CMD}" >&2
            exit 1
            ;;
    esac
}

main $@