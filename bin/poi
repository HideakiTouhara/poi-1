#!/bin/bash

readonly root_dir=$(git rev-parse --show-toplevel)
readonly default_poi_dir=$HOME/.poi

_load_poi_config(){
    if [ -z "${POI_DIR}" ]; then
        poi_dir=$default_poi_dir
    else
        poi_dir=${POI_DIR}
    fi

    if [ ! -d $poi_dir ]; then
        mkdir -p $poi_dir/{tmp,trash}
    fi
}

_parse(){
    while (( "$#" )); do
        case "$1" in
            -*|--*)
                case "$1" in
                    -t|--tag)
                        tag=$2
                        ;;
                    --title)
                        title=$2
                        ;;
                    *)
                        echo "Error: no option ${1}" >&2
                        exit 1
                        ;;
                esac
                shift 2
                ;;
            help)
                helpPoiCommand
                exit 1
                ;;
            *)
                echo "Error: no command found ${CMD}" >&2
                exit 1
                ;;
        esac
    done
}

_findFile(){
    case "$1" in
        help|--help)
            helpLsCommand
            exit 1
            ;;
        -t|--tag)
            tag=$2
            shift 2
            ;;
        --title)
            title=$2
            shift 2
            ;;
        --interactive)
            interactive=1
            shift
            ;;
        -*|--*)
            echo "Error, no such option" >&2
            exit 1
            ;;
    esac

    if [[ -n "$title" ]]; then
        files=$(ls -1 $poi_dir/tmp/ | egrep -e $title)
    elif [[ -n "$tag" ]]; then
        files=$(ls -1 $poi_dir/tmp/ | egrep -e $tag)
    else 
        files=$(ls -1 $poi_dir/tmp/)
    fi
}

poi(){
    if [ -z "$title" ]; then
        title=noname
    fi
    filename=$(date +%Y_%m_%d_%H_%M_%S)-$title

    while read line; do
        echo $line >> $poi_dir/tmp/$filename
    done

    echo "Poied $title"
}

lsPoi(){
    _findFile $@
    if [[ -z $files ]]; then
        echo "No files found"
        exit 0
    fi

    echo -e "Title\tDatetime\t\tTags"
    for file in $files; do
        datetime=$(basename $file |  sed -e 's/\(.*\)-\(.*\)/\1 \2/' | awk '{print $1}')
        datetime_unix=$(date -jf '%Y_%m_%d_%H_%M_%S' $datetime +%s)
        filename=$(basename $file | sed -e 's/\(.*\)-\(.*\)/\1 \2/' | awk '{print $2}')
        echo -e "$filename\t"$(date -r $datetime_unix '+%Y/%m/%d %H:%M:%S')""
    done
}

catPoi(){
    _findFile $@
    if [[ -z $files ]]; then
        echo "No files found"
        exit 0
    fi

    len=$(echo $files | wc -l)
    if [[ $len -eq 1 ]]; then
        echo "hoge"
    else
        if [[ ! $interactive -eq 1 ]]; then
            echo "Error multifile"
            exit 1
        else
            echo "no"
        fi
    fi
}

helpPoi() {
    cat <<-shoWHelp
        Name
            Poi is a useful temporary file manager 🍭 🗑 ⚔️

        Synopsis
            poi COMMAND

        COMMANDs:
            [Store tmp file]
             
                curl -s "www.google.com" | poi poi --title google_page --tag html,google

            [Restore tmp file: command mode]

                poi find SUM_COMMAND google_page

            [Search file: command mode]

                poi find SUM_COMMAND googl
            
            [Search by tag: command mode]

                poi find SUM_COMMAND html
            
            [Search by file: interactive mode]

                poi find SUM_COMMAND -i

            [Search by tag: interactve mode]

                poi find SUM_COMMAND -i

            [Show help]

                poi help
        
shoWHelp
}

helpPoiCommand(){
    cat <<-shoWPoiHelp
        Name
            poi poi - list tmp file

        Synopsis
            SOME_STDOUT | poi poi

        Flags
            --title     - add title
            -t, --tag   - add tag   
shoWPoiHelp
}

helpLsCommand(){
    cat <<-shoWPoiHelp
        Name
            poi ls - stores tmp file

        Synopsis
            SOME_STDOUT | poi poi

        Flags
            --title     - add title
            -t, --tag   - add tag   
shoWPoiHelp
}

main(){
    _load_poi_config
    CMD=${1}

    if [ -z "${CMD}" ]; then
        echo "Error: no command specified" >&2
        exit 1
    fi

    case ${CMD} in
        poi)
            shift
            _parse $@
            poi
            ;;
        ls)
            shift
            lsPoi $@
            ;;
        cat)
            shift
            catPoi $@
            ;;
        sweep)
            shift
            mv $poi_dir/tmp/* $poi_dir/trash
            ;;
        help)
            helpPoi
            exit 0
            ;;
        *)
            echo "Error: no command found ${CMD}" >&2
            exit 1
            ;;
    esac
}

main $@